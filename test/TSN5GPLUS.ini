[General]
network = TSN5GPLUS

*.*.macCellId = 1
*.*.masterId = 1
*.*.nrMacCellId = 1
*.*.nrMasterId = 1
[config1]
*.tsnClient*.numApps = 1
*.tsnClient*.app[0].typename = "UdpBasicApp"
*.tsnClient*.app[0].packetName = "video"
*.tsnClient*.app[0].destAddresses = "tsnServer"
*.tsnClient*.app[0].destPort = 1001
*.tsnClient*.app[0].localPort = 1001
*.tsnClient*.app[0].messageLength = 1B # 42B = 8B (UDP) + 20B (IP) + 14B (ETH MAC) + 4B (ETH FCS) + 8B (ETH PHY)
*.tsnClient*.app[0].sendInterval = exponential(400us)
*.tsnClient*.app[0].stopTime = 1s
*.tsnClient*.app[0].startTime = 0s
# server applications
*.tsnServer*.numApps = 1
*.tsnServer.app[0].typename = "UdpApp"
*.tsnServer.app[0].display-name = "video"
*.tsnServer.app[0].io.destAddress = "tsnClient"
*.tsnServer.app[0].io.destPort = 1001
*.tsnServer.app[0].io.localPort = 1001
*.tsnServer.app[0].source.packetLength = 10B
*.tsnServer.app[0].source.productionInterval = 5ms
*.tsnServer.app[0].source.initialProductionOffset = 2ms

*.tsnServer.ipv4.routingTable.routingFile = "Server.mrt"
*.*.hasOutgoingStreams = true
*.*.hasIncomingStreams = true

*.tsnClient*.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]
*.tsnClient*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]
*.tsnServer.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]
*.tsnServer.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]

# switch stream decoding
*.tsnSwitch.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "besteffort"},
                                                 {pcp: 4, stream: "video"}]
*.tsnSwitch.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]
*.tsnSwitch.hasIngressTrafficFiltering = true
# per-stream filtering for video stream
*.tsnSwitch.bridging.streamFilter.ingress.typename = "SimpleIeee8021qFilter"
*.tsnSwitch.bridging.streamFilter.ingress.numStreams = 2
*.tsnSwitch.bridging.streamFilter.ingress.classifier.mapping = {besteffort: 0,video: 1}
*.tsnSwitch.bridging.streamFilter.ingress.*[0].display-name = "besteffort"
*.tsnSwitch.bridging.streamFilter.ingress.*[1].display-name = "video"
*.tsnSwitch.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.tsnSwitch.bridging.streamFilter.ingress.meter[*].committedInformationRate = 20Mbps
*.tsnSwitch.bridging.streamFilter.ingress.meter[*].committedBurstSize = 10kB
*.tsnSwitch.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"


# enable egress traffic shaping
*.tsnSwitch.hasEgressTrafficShaping = true
*.tsnSwitch.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]
# credit-based and asynchronous traffic shaping
*.tsnSwitch.eth[*].macLayer.queue.numTrafficClasses = 2
*.tsnSwitch.eth[*].macLayer.queue.*[0].display-name = "besteffort"
*.tsnSwitch.eth[*].macLayer.queue.*[1].display-name = "video"
*.tsnSwitch.eth[*].macLayer.queue.queue[0].typename = "EligibilityTimeQueue"
*.tsnSwitch.eth[*].macLayer.queue.queue[1].typename = "EligibilityTimeQueue"
*.tsnSwitch.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].typename = "Ieee8021qAsynchronousShaper"
*.tsnSwitch.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].typename = "Ieee8021qAsynchronousShaper"

[config2]
*.tsnSwitch.hasTimeSynchronization = false
*.tsnServer.hasTimeSynchronization = false
*.tsnSwitch.gptp.masterPorts = ["eth1"]
*.tsnSwitch.gptp.slavePort = "eth2"
*.tsnClock.gptp.masterPorts = ["eth0"]
*.*switch.hardware_delay = 1ms
**.tsnClock.clock.oscillator.typename = "RandomDriftOscillator"
**.oscillator.changeInterval = 12.5ms
**.oscillator.driftRate = uniform(-100ppm, 100ppm)
**.oscillator.driftRateChange = uniform(-1ppm, 1ppm)
**.oscillator.driftRateChangeUpperLimit = 100ppm
**.oscillator.driftRateChangeLowerLimit = -100ppm
# Set all reference clocks to master clock so the time difference can be visualized
**.referenceClock = "tsnClock.clock"
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer[*].displayInfos = true
# data link visualizer displays gPTP time synchronization packets
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.visualizer.dataLinkVisualizer[0].packetFilter = "GptpSync"
*.visualizer.dataLinkVisualizer[0].lineColor = "blue2"

*.visualizer.numInfoVisualizers = 3
*.visualizer.infoVisualizer[0].modules = "*.tsnClock.clock"
*.tsnClock.clock.displayStringTextFormat = "time: %T"
*.visualizer.infoVisualizer[1].modules = "*.tsnSwitch.clock"
*.visualizer.infoVisualizer[1].placementHint = "top"
*.visualizer.infoVisualizer[2].modules = "*.tsnServer.clock"
*.visualizer.infoVisualizer[2].placementHint = "bottom"
*.tsnServer.clock.displayStringTextFormat = "diff: %d"
*.tsnSwitch.clock.displayStringTextFormat = "diff: %d"
