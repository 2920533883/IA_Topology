[S2C]
network = S2C

*.*.macCellId = 1
*.*.masterId = 1
*.*.nrMacCellId = 1
*.*.nrMasterId = 1
*.u*.DSTT.DSTT.destAddress = "Server"

*.Client1.numApps = 1
*.Client1.app[*].typename = "UdpSourceApp"
*.Client1.app[*].io.destAddress = "Server"
*.Client1.app[*].io.localPort = 1000+ancestorIndex(1)
*.Client1.app[0].display-name = "TCU"
*.Client1.app[0].io.destPort = 1001
*.Client1.app[0].source.packetLength = 77B
*.Client1.app[0].source.productionInterval = 10ms


#*.Client2.numApps = 1
#*.Client2.app[*].typename = "UdpSourceApp"
#*.Client2.app[*].io.destAddress = "Server"
#*.Client2.app[*].io.localPort = 1000+ancestorIndex(1)
#*.Client2.app[0].display-name = "BCU"
#*.Client2.app[0].io.destPort = 1001
#*.Client2.app[0].source.packetLength = 46B
#*.Client2.app[0].source.productionInterval = 10ms


# server applications
*.Server*.numApps = 2
*.Server.app[*].typename = "UdpSinkApp"
*.Server.app[0].display-name = "besteffort"
*.Server.app[1].display-name = "video"
*.Server.app[*].io.localPort = 1000+ancestorIndex(1)

*.*.hasOutgoingStreams = true
*.*.hasIncomingStreams = true

*.Client*.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]
*.Client*.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]
*.Server.bridging.streamIdentifier.identifier.mapping = [{stream: "besteffort", packetFilter: expr(udp.destPort == 1000)},
															{stream: "video", packetFilter: expr(udp.destPort == 1001)}]
*.Server.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]

# switch stream decoding
*.tsnSwitch.bridging.streamCoder.decoder.mapping = [{pcp: 0, stream: "besteffort"},
                                                 {pcp: 4, stream: "video"}]
*.tsnSwitch.bridging.streamCoder.encoder.mapping = [{stream: "besteffort", pcp: 0},
													{stream: "video", pcp: 4}]
*.tsnSwitch.hasIngressTrafficFiltering = true
# per-stream filtering for video stream
*.tsnSwitch.bridging.streamFilter.ingress.typename = "SimpleIeee8021qFilter"
*.tsnSwitch.bridging.streamFilter.ingress.numStreams = 2
*.tsnSwitch.bridging.streamFilter.ingress.classifier.mapping = {besteffort: 0,video: 1}
*.tsnSwitch.bridging.streamFilter.ingress.*[0].display-name = "besteffort"
*.tsnSwitch.bridging.streamFilter.ingress.*[1].display-name = "video"
*.tsnSwitch.bridging.streamFilter.ingress.meter[*].typename = "EligibilityTimeMeter"
*.tsnSwitch.bridging.streamFilter.ingress.meter[*].committedInformationRate = 1Mbps
*.tsnSwitch.bridging.streamFilter.ingress.meter[*].committedBurstSize = 1kB
*.tsnSwitch.bridging.streamFilter.ingress.filter[*].typename = "EligibilityTimeFilter"


# enable egress traffic shaping
*.tsnSwitch.hasEgressTrafficShaping = true
*.tsnSwitch.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]
# credit-based and asynchronous traffic shaping
*.tsnSwitch.eth[*].macLayer.queue.numTrafficClasses = 2
*.tsnSwitch.eth[*].macLayer.queue.*[0].display-name = "besteffort"
*.tsnSwitch.eth[*].macLayer.queue.*[1].display-name = "video"
*.tsnSwitch.eth[*].macLayer.queue.queue[0].typename = "EligibilityTimeQueue"
*.tsnSwitch.eth[*].macLayer.queue.queue[1].typename = "EligibilityTimeQueue"
*.tsnSwitch.eth[*].macLayer.queue.transmissionSelectionAlgorithm[0].typename = "Ieee8021qAsynchronousShaper"
*.tsnSwitch.eth[*].macLayer.queue.transmissionSelectionAlgorithm[1].typename = "Ieee8021qAsynchronousShaper"